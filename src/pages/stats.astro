---
export const prerender = false

import { Image } from "astro:assets"
import { WinrateChart } from "../components/widgets/WinrateChart"
import { GameNumberChart } from "../components/widgets/GameNumberChart"
import { PlayerNumberChart } from "../components/widgets/PlayerNumberChart"

import Layout from "../layouts/Layout.astro"
import { League, Race, type StatsByTimeEntry } from "../lib/api"
import { StatisticsApi } from "../lib/api/services/StatisticsApi"
import { formatNumber, getDataOrErrorResponse } from "../lib/utils"
import Timeago from "../components/Timeago.astro"
import { LeagueDropdown } from "../components/widgets/LeagueDropdown"
import Header from "../components/layout/Header.astro"
import Section from "../components/layout/Section.astro"
import HeaderMeta from "../components/layout/HeaderMeta.astro"
import { formatDateRelative } from "../lib/format"

const league = new URLSearchParams(Astro.url.search).get("league")

const longNumberFormatter = new Intl.NumberFormat("en-us")

const [[{ races, cached_at }, { activity }], error] = await getDataOrErrorResponse(
  StatisticsApi.getStatistics({ league: league ? (league as League) : null }),
  StatisticsApi.getStatisticsActivity()
)
if (error) return error

const durationLabels = ["0-300", "301-600", "601-900", "901-1200", "1201+"]
const durationPrettyLabels = ["0-5m", "5-10m", "10-15m", "15-20m", "20m+"]

const numberPlayers: number[] = []
const numberMatches: number[] = []
const dateLabels: string[] = []
for (const entry of activity) {
  dateLabels.push(entry.date)
  numberMatches.push(entry.matches)
  numberPlayers.push(entry.players)
}

const sumMatches = numberMatches.reduce((total, value) => total + value, 0)
const earliestDate = new Date(dateLabels[0])

function mapFactionWinrate(race: StatsByTimeEntry) {
  const round = (value: number) => Math.round(value * 10) / 10
  const winrate = round(race.aggregated.win_rate!)
  const pickrate = round(race.aggregated.pick_rate!)
  const labels: string[] = []
  const data: number[] = []
  if (!race.history.at(-1)?.matches_count) race.history.pop()
  for (const entry of race.history) {
    labels.push(entry.date!)
    data.push(round(entry.win_rate!))
  }
  const duration = {
    labels: [],
    data: [],
  } as { labels: string[]; data: number[] }

  durationLabels.forEach((label, index) => {
    duration.labels.push(durationPrettyLabels[index])
    duration.data.push(round(race.aggregated.win_rate_by_match_length[label]!))
  })
  return {
    winrate,
    pickrate,
    matches: {
      count: race.aggregated.matches_count,
      mirrors: race.aggregated.matches_count_with_mirror! - race.aggregated.matches_count!,
    },
    history: {
      labels,
      data,
    },
    duration,
  }
}

const factions = [
  {
    name: "Vanguard",
    icon: import("../assets/game/factions/vanguard-small.png"),
    stats: mapFactionWinrate(races.find((x) => x.race === Race.VANGUARD)!),
  },
  {
    name: "Infernals",
    icon: import("../assets/game/factions/infernals-small.png"),
    stats: mapFactionWinrate(races.find((x) => x.race === Race.INFERNALS)!),
  },
]
---

<Layout title="Statistics">
  <Header section="Insights" title="Statistics">
    <HeaderMeta
      items={[
        {
          icon: import("lucide-static/icons/clock.svg?raw"),
          label: `Last updated ${formatDateRelative(new Date(cached_at))}`,
        },
      ]}
    />
  </Header>
  <Section title="Factions" class="!max-w-screen-md">
    {
      league && (
        <p slot="header" class="text-balance text-sm text-gray-500">
          League stats are based on <em>all matches</em> by players who are currently in the {league} league.
        </p>
      )
    }
    <div slot="controls">
      <LeagueDropdown selected={league} queryParam="league" client:idle />
    </div>
    <div>
      <div class="flex w-full flex-wrap gap-4 sm:flex-nowrap">
        {
          factions.map((faction) => (
            <div class="min-w-0 flex-auto rounded-xl border border-gray-800 bg-gray-900 p-4">
              <h2 class="mb-4 text-xl font-black">{faction.name}</h2>
              <div class="flex gap-2 xs:gap-4">
                <Image src={faction.icon} alt="Vanguard" class="size-12 xs:size-16" />
                <div class="flex flex-col">
                  <span class="text-sm font-bold text-gray-300">Win Rate</span>
                  <span
                    class:list={[
                      "text-xl xs:text-3xl font-black",
                      faction.stats.winrate >= 50 ? "text-lime-500" : "text-red-500",
                    ]}
                  >
                    {faction.stats.winrate}%
                  </span>
                </div>
                <div class="flex flex-col">
                  <span class="text-sm font-bold text-gray-300">Pick Rate</span>
                  <span class="text-xl font-black xs:text-3xl">{faction.stats.pickrate}%</span>
                </div>
              </div>
              <WinrateChart data={faction.stats.history.data} labels={faction.stats.history.labels} client:idle />
              {/*<WinrateChart data={faction.stats.duration.data} labels={faction.stats.duration.labels} client:idle />*/}
              <p class="mt-2 pl-1 text-xs leading-snug text-gray-500">
                Based on {formatNumber(faction.stats.matches.count!)} matches in the past 7 days, excl.{" "}
                {formatNumber(faction.stats.matches.mirrors!)} mirrors
              </p>
            </div>
          ))
        }
      </div>
    </div>
  </Section>
  <Section title="Activity" class="!max-w-screen-md">
    <div class="min-w-0 flex-auto rounded-xl border border-gray-800 bg-gray-900 p-4">
      <h2 class="mb-4 text-xl font-black">Ranked games played</h2>
      <GameNumberChart data={numberMatches} labels={dateLabels} client:idle />
      <p class="mt-2 pl-1 text-xs leading-snug text-gray-500">
        In total, {longNumberFormatter.format(sumMatches)} ranked games were played since {
          earliestDate.toLocaleDateString("en", { dateStyle: "long" })
        }.
      </p>
    </div>
  </Section>
  <Section class="!max-w-screen-md">
    <div class="min-w-0 flex-auto rounded-xl border border-gray-800 bg-gray-900 p-4">
      <h2 class="mb-4 text-xl font-black">Ladder players</h2>
      <PlayerNumberChart data={numberPlayers} labels={dateLabels} client:idle />
    </div>
  </Section>
</Layout>
