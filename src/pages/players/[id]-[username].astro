---
export const prerender = false
import PlayerLayout from "../../layouts/PlayerLayout.astro"
import Widget from "../../components/Widget.astro"
import MatchPreview from "../../components/widgets/MatchPreview.tsx"
import { PlayersApi } from "../../lib/api"
import PlayerActivity from "../../components/widgets/PlayerActivity.astro"
import PlayerMatchupStats from "../../components/widgets/PlayerMatchupStats.astro"
import PlayerGameLengthStats from "../../components/widgets/PlayerGameLengthStats.astro"
import PlayerOpponents from "../../components/widgets/PlayerOpponents.astro"
import Section from "../../components/layout/Section.astro"
import Main from "../../components/layout/Main.astro"
import Sidebar from "../../components/layout/Sidebar.astro"
import { getPlayerSlug } from "../../lib/format"
import { getDataOrErrorResponse } from "../../lib/utils"
import PlayerFactionCard from "../../components/widgets/PlayerFactionCard.astro"
import Box from "../../components/layout/Box.astro"

const playerId = Astro.params.id!
const playerUsername = Astro.params.username!
const [[player, playerMatches, playerActivity, playerMatchupStats, playerOpponents], error] =
  await getDataOrErrorResponse(
    PlayersApi.getPlayer({ playerId }),
    PlayersApi.getPlayerMatches({ playerId, count: 10 }),
    PlayersApi.getPlayerStatisticsActivity({ playerId }),
    PlayersApi.getPlayerStatisticsMatchups({ playerId }),
    PlayersApi.getPlayerStatisticsOpponents({ playerId, count: 5 })
  )
if (error) return error

const leaderboardEntries = player?.leaderboard_entries
  .filter((x) => x.matches > 0)
  .sort((a, b) => (b.points ?? 0) - (a.points ?? 0))
---

<PlayerLayout player={player}>
  <Section>
    <Main>
      <div class="flex flex-col gap-4 md:flex-row">
        {
          leaderboardEntries.map((entry) => (
            <PlayerFactionCard
              faction={entry.race === "infernals" ? "infernals" : "vanguard"}
              entry={entry}
              class="flex-grow basis-1/2"
            />
          ))
        }
        {
          leaderboardEntries.length === 1 && (
            <Box class="hidden basis-2/5 items-center justify-center opacity-70 md:flex">
              <p class="text-center font-bold text-gray-500">No other factions played</p>
            </Box>
          )
        }
      </div>
      <Widget title="Recent Matches" label="Closed Beta Ranked">
        <div>
          {playerMatches.matches.map((match) => <MatchPreview match={match} mainPlayerId={playerId} />)}
        </div>
        <p class="pt-4 text-right text-sm font-bold text-gray-500">
          <a href=`/players/${getPlayerSlug(player)}/matches`>Open the full history â†’</a>
        </p>
      </Widget>
    </Main>
    <Sidebar>
      {playerActivity?.history && <PlayerActivity activity={playerActivity} {player} />}
      {playerMatchupStats.matchups.length > 0 && <PlayerMatchupStats playerMatchupStats={playerMatchupStats} />}
      {playerMatchupStats.matchups.length > 0 && <PlayerGameLengthStats playerMatchupStats={playerMatchupStats} />}
      {playerOpponents.opponents.length > 0 && <PlayerOpponents opponents={playerOpponents} />}
    </Sidebar>
  </Section>
</PlayerLayout>
