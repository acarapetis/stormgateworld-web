---
export const prerender = false
import Layout from "../../layouts/Layout.astro"
import Header from "../../components/layout/Header.astro"
import HeaderContent from "../../components/layout/HeaderContent.astro"

import Widget from "../../components/Widget.astro"
import { Image } from "astro:assets"
import infernals from "../../assets/game/factions/infernals-small.png"
import vanguard from "../../assets/game/factions/vanguard-small.png"
import MatchPreview from "../../components/widgets/MatchPreview.astro"
import { PlayersApi } from "../../lib/api"
import { RankedBadge } from "../../components/ui/RankedBadge"
import PlayerActivity from "../../components/widgets/PlayerActivity.astro"
import PlayerMatchupStats from "../../components/widgets/PlayerMatchupStats.astro"
import PlayerGameLengthStats from "../../components/widgets/PlayerGameLengthStats.astro"
import PlayerOpponents from "../../components/widgets/PlayerOpponents.astro"
import { styles } from "../../lib/theme"
import HeaderMeta from "../../components/layout/HeaderMeta.astro"
import Section from "../../components/layout/Section.astro"
import Main from "../../components/layout/Main.astro"
import Sidebar from "../../components/layout/Sidebar.astro"
import { formatDateRelative } from "../../lib/format"
import { getDataOrErrorResponse } from "../../lib/utils"

type Theme = keyof typeof styles.badges

const playerId = Astro.params.id!
const [[player, playerMatches, playerActivity, playerMatchupStats, playerOpponents], error] =
  await getDataOrErrorResponse(
    PlayersApi.getPlayer({ playerId }),
    PlayersApi.getPlayerMatches({ playerId }),
    PlayersApi.getPlayerStatisticsActivity({ playerId }),
    PlayersApi.getPlayerStatisticsMatchups({ playerId }),
    PlayersApi.getPlayerStatisticsOpponents({ playerId, count: 5 })
  )
if (error) return error

const highestLeague = player?.leaderboard_entries?.reduce(
  (acc, entry) => (entry.points > acc.points ? entry : acc),
  player.leaderboard_entries[0]
)
---

<Layout title={player?.nickname!}>
  <Header backdropImage={player.avatar_url}>
    <HeaderContent section="Players" title={player.nickname!}>
      {
        player.avatar_url && (
          <img
            slot="left"
            src={player.avatar_url}
            alt={player.nickname}
            class="mr-4 size-8 flex-none rounded md:size-16"
          />
        )
      }
      <RankedBadge slot="right" entry={highestLeague} class="w-16 md:w-20" client:load />
    </HeaderContent>
    <HeaderMeta
      items={[
        {
          icon: import("lucide-static/icons/activity.svg?raw"),
          label: `Last Match ${formatDateRelative(
            new Date(playerMatches.matches[0]?.created_at || player.last_match_ended_at!)
          )}`,
        },
        { icon: import("lucide-static/icons/hash.svg?raw"), label: player.id },
      ]}
    />
  </Header>
  <Section>
    <Main>
      <Widget title="Top Ranks">
        <div class="flex flex-row flex-wrap gap-2">
          {
            player.leaderboard_entries.map((entry) => (
              <div
                class:list={[
                  "flex-auto rounded-lg pl-3 pr-1 py-2 flex items-center gap-3 text-sm sm:text-base",
                  styles.badges[entry.race as Theme].badge,
                ]}
              >
                <Image
                  src={entry.race === "infernals" ? infernals : vanguard}
                  alt={entry.race}
                  class="size-6 sm:size-10"
                />
                <div>
                  <span class:list={["text-xs", styles.badges[entry.race as Theme].badgeLabel]}>Rank</span>
                  <p>#{entry.rank}</p>
                </div>
                <div>
                  <span class:list={["text-xs", styles.badges[entry.race as Theme].badgeLabel]}>Points</span>
                  <p>
                    {Math.round(entry.points)}
                    <RankedBadge entry={entry} class="inline-block w-4" client:load />
                  </p>
                </div>
                <div>
                  <span class:list={["text-xs", styles.badges[entry.race as Theme].badgeLabel]}>MMR</span>
                  <p>{Math.round(entry.mmr)}</p>
                </div>
              </div>
            ))
          }
        </div>
      </Widget>
      <Widget title="Recent Matches" label="Closed Beta Ranked">
        <div class="">
          {playerMatches.matches.map((match) => <MatchPreview match={match} mainPlayerId={playerId} />)}
        </div>
      </Widget>
    </Main>
    <Sidebar>
      {playerActivity?.history && <PlayerActivity activity={playerActivity} {player} />}
      {playerMatchupStats.matchups.length > 0 && <PlayerMatchupStats playerMatchupStats={playerMatchupStats} />}
      {playerMatchupStats.matchups.length > 0 && <PlayerGameLengthStats playerMatchupStats={playerMatchupStats} />}
      {playerOpponents.opponents.length > 0 && <PlayerOpponents opponents={playerOpponents} />}
    </Sidebar>
  </Section>
</Layout>
